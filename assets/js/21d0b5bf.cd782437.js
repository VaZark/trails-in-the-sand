"use strict";(self.webpackChunktil_remaster=self.webpackChunktil_remaster||[]).push([[4011],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=d(t),p=a,m=f["".concat(l,".").concat(p)]||f[p]||u[p]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6058:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return f}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l="DRF POST : Accessing data and files",d={unversionedId:"django/basics/DRF POST : Accessing data and files",id:"django/basics/DRF POST : Accessing data and files",title:"DRF POST : Accessing data and files",description:"POST data & files",source:"@site/docs-python/django/basics/DRF POST : Accessing data and files.md",sourceDirName:"django/basics",slug:"/django/basics/DRF POST : Accessing data and files",permalink:"/docs-python/django/basics/DRF POST : Accessing data and files",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Django Docs",permalink:"/docs-python/django/"},next:{title:"Django Model Instance - Validation and Overriding",permalink:"/docs-python/django/basics/Django Model Instance - Validation and Overriding"}},c=[{value:"POST data &amp; files",id:"post-data--files",children:[{value:"DRF",id:"drf",children:[],level:3},{value:"Django Forms",id:"django-forms",children:[],level:3}],level:2}],u={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"drf-post--accessing-data-and-files"},"DRF POST : Accessing data and files"),(0,o.kt)("h2",{id:"post-data--files"},"POST data & files"),(0,o.kt)("p",null,"Files can be accessed with ",(0,o.kt)("inlineCode",{parentName:"p"},"request.FILES"),". Any other data is to be accessed with ",(0,o.kt)("inlineCode",{parentName:"p"},"request.DATA"),"."),(0,o.kt)("p",null,"By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast."),(0,o.kt)("p",null,"However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system\u2019s temporary directory. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request.POST")," : Only handles form data.  Only works for 'POST' method."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"request.data")," : Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.")),(0,o.kt)("h3",{id:"drf"},"DRF"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class ImageUploadParser(FileUploadParser): # Subclass and restrict file type\n    media_type = \'image/*\'\n\nclass MyUploadView(APIView):\n  parser_class = (FileUploadParser,) # Upload only files\n  # FormUploadParser - ensure form is parsed\n  # ImageUploadParser - ensure images upload only\n\n  def put(self, request, format=None):\n    if \'file\' not in request.data:\n      raise ParseError("Empty content")\n\n    f = request.data[\'file\']\n\n    """\n    # Verify image type\n    from PIL import Image ## Also used by ImageField()\n    try:\n      img = Image.open(f)\n      img.verify()\n    except:\n      raise ParseError("Unsupported image type")\n    """\n\n    mymodel.my_file_field.save(f.name, f, save=True)\n    return Response(status=status.HTTP_201_CREATED)\n')),(0,o.kt)("h3",{id:"django-forms"},"Django Forms"),(0,o.kt)("p",null,"Django's forms can be used to fetch data in a request and map it to a field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class UploadFileForm(forms.Form):\n    title = forms.CharField(max_length=50)\n    file = forms.FileField()\n    multi_file_field = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))\n\n\ndef upload_file(request):\n    if request.method == 'POST':\n        form = UploadFileForm(request.POST, request.FILES) # FILES is also required\n        if form.is_valid():\n            handle_uploaded_file(request.FILES['file'])\n            return HttpResponseRedirect('/success/url/')\n    else:\n        form = UploadFileForm()\n    return render(request, 'upload.html', {'form': form})\n")))}f.isMDXComponent=!0}}]);