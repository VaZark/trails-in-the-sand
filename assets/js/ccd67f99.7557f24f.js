"use strict";(self.webpackChunktil_remaster=self.webpackChunktil_remaster||[]).push([[3803],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(a),f=r,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||i;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2121:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={},s="Custom Validations",d={unversionedId:"django/drf/Custom Validations",id:"django/drf/Custom Validations",title:"Custom Validations",description:"Validation",source:"@site/docs-python/django/drf/Custom Validations.md",sourceDirName:"django/drf",slug:"/django/drf/Custom Validations",permalink:"/docs-python/django/drf/Custom Validations",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Querysets",permalink:"/docs-python/django/db/Querysets"},next:{title:"Django Related Datafields",permalink:"/docs-python/django/drf/Django Related Datafields"}},c=[{value:"Validation",id:"validation",children:[],level:2},{value:"Context for serializers",id:"context-for-serializers",children:[{value:"Additonal context for nested serializers",id:"additonal-context-for-nested-serializers",children:[],level:3}],level:2}],u={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-validations"},"Custom Validations"),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Error messages are created when the serializer classes and their fields are validated."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"validate()")," checks the fields and then runs the class level validations. We can raise errors with ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidationError"),". Custom validations are run with ",(0,i.kt)("inlineCode",{parentName:"p"},"validate_<field_name>(self)")," for fields and in the ",(0,i.kt)("inlineCode",{parentName:"p"},"validate()")," for the class-level validations."),(0,i.kt)("p",null,"However, we can choose to run multiple validations for a single field with the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," field of any Field object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def is_valid_value(value):\n  if value > 10:\n    raise serializers.ValidationError('Value cannot be higher than 10')\n\ndef is_postive(value):\n  if value < 0:\n    raise serializers.ValidationError('Value cannot be negative ')\n\nclass RandomSerializer(serializers.ModelSerializer):\n    value = IntegerField(validators=[is_valid_value, is_positive])\n")),(0,i.kt)("h2",{id:"context-for-serializers"},"Context for serializers"),(0,i.kt)("p",null,"Occasionally serializers might need additional data to perform custom / overridden operations. We can set via the ",(0,i.kt)("em",{parentName:"p"},"context")," argument of any serializer instance. The context param conventionally takes a dictionary as input."),(0,i.kt)("h3",{id:"additonal-context-for-nested-serializers"},"Additonal context for nested serializers"),(0,i.kt)("p",null,"Nested serializers are evaluated before the current serializer. Occasionally, a child serializer might need to look up and use a parent serializer's fields or some other related data."),(0,i.kt)("p",null,"They can be accessed by using ",(0,i.kt)("inlineCode",{parentName:"p"},"self.parent.initial_data")," for regular nested serializer and with ",(0,i.kt)("inlineCode",{parentName:"p"},"self.parent.parent.initial_data")," when the nested serializer is passed with ",(0,i.kt)("em",{parentName:"p"},"Many=True"),"."),(0,i.kt)("p",null,"Sometimes, when the ",(0,i.kt)("em",{parentName:"p"},"initial_data")," is unavailable or if some other unrelated data external to the serializer has to be passed, we can pass it down as a part of the context dict."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ParentSerializer(serializers.Serializer):\n  child = ChildSerializer()\n\n  def to_internal_value(self, data):\n    self.initial_data = data # Force set the initial_data for the child\n    super().to_internal_value(data)\n\nclass ChildSerializer(serializers.Serializer):\n\n  def validate(self, data):\n    parent_data = self.parent.initial_data\n    # Validation\n    return data\n")))}p.isMDXComponent=!0}}]);